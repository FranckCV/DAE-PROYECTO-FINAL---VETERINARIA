package capaPresentacion;

/**
 *
 * @author Windows10
 */
import capaNegocio.clsCustodia;
import capaNegocio.clsDetalleVacunacion;
import capaNegocio.clsMascota;
import capaNegocio.clsVacuna;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class jdDVacuna extends javax.swing.JDialog {

    private int vacuna = 0;
    private int codigoEspecie;
    private int especieId;
    clsDetalleVacunacion objVac = new clsDetalleVacunacion();
    clsVacuna objvc = new clsVacuna();

    public jdDVacuna(java.awt.Frame parent, boolean modal,int codigoEspecie) {
        super(parent, modal);
        initComponents();
       // cargarVacunas(codigoEspecie);
        this.codigoEspecie = codigoEspecie; // Filtra las vacunas según la especie
listarVacunasPorEspecie();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtVacuna = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVacuna = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel1.setText("Buscar vacuna por nombre:");

        txtVacuna.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtVacunaKeyTyped(evt);
            }
        });

        tblVacuna.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblVacuna.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblVacunaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblVacuna);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/buscar-pequeño.png"))); // NOI18N
        btnBuscar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnBuscar.setBorderPainted(false);
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.setName(""); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/escoba-mascota.png"))); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtVacuna, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtVacuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 527, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 335, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtVacunaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVacunaKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetter(c) && c != KeyEvent.VK_BACK_SPACE && c != KeyEvent.VK_DELETE) {
            evt.consume();
            JOptionPane.showMessageDialog(txtVacuna, "Solo se permiten letras en esta opción");
        }
    }//GEN-LAST:event_txtVacunaKeyTyped

    private void tblVacunaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVacunaMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblVacuna.getSelectedRow();
        txtVacuna.setText(String.valueOf(tblVacuna.getValueAt(tblVacuna.getSelectedRow(), 1)));
        if (selectedRow != -1) { // Verificar que se haya seleccionado una fila
            int cod = Integer.parseInt(String.valueOf(tblVacuna.getValueAt(selectedRow, 0))); // Código
            pasarM(cod);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una mascota válido.");
        }
    }//GEN-LAST:event_tblVacunaMouseClicked

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        ResultSet rsDuenio = null;
        DefaultTableModel modeloM = new DefaultTableModel();
        modeloM.addColumn("ID");
        modeloM.addColumn("Nombre");
        modeloM.addColumn("Dosis por Kg");
        modeloM.addColumn("Especie");
        modeloM.addColumn("Disponible");
        tblVacuna.setModel(modeloM);

        try {
            if (txtVacuna.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe llenar el campo vacío para realizar la búsqueda");
            //    listarVacunas();  // Recargar la lista completa
                txtVacuna.setText("");
                return;
            }
            rsDuenio = objVac.filtrarPorNombreYEspecie(txtVacuna.getText(), codigoEspecie);
            while (rsDuenio.next() && rsDuenio != null) {
                boolean disponibilidad = rsDuenio.getBoolean("disponibilidad");
                String disponibleText = disponibilidad ? "Disponible" : "No disponible";
                modeloM.addRow(new Object[]{
                    rsDuenio.getInt("id"),
                    rsDuenio.getString("nombre"),
                    rsDuenio.getDouble("dosis_x_kgpeso"),
                    rsDuenio.getString("nom_especie"),
                    disponibleText
                });
                if (modeloM.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "No se encontraron resultados para la vacuna seleccionada");
             //       listarVacunas();
                    txtVacuna.setText("");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error del sistema en la búsqueda: " + e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            txtVacuna.setText("");
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    public void listarVacunasPorEspecie() {
        ResultSet rsVac = null;
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Dosis por Kg");
        modelo.addColumn("Disponible");
        tblVacuna.setModel(modelo);

        try {
            // Llamar a la función que lista las vacunas por especie
            rsVac = objVac.listarVacunasPorEspecie(codigoEspecie); // Filtra las vacunas por especie

            while (rsVac.next()) {
                boolean disponibilidad = rsVac.getBoolean("disponibilidad");
                String disponibleText = disponibilidad ? "Disponible" : "No disponible";

                modelo.addRow(new Object[]{
                    rsVac.getInt("id"),
                    rsVac.getString("nombre"),
                    rsVac.getDouble("dosis_x_kgpeso"),
                    disponibleText
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al listar vacunas: " + e.getMessage());
        }
    }

public int getCod() {
    int selectedRow = tblVacuna.getSelectedRow();
    if (selectedRow != -1) {
        return Integer.parseInt(tblVacuna.getValueAt(selectedRow, 0).toString()); // Código de vacuna
    }
    return 0;
}

    private void pasarM(int cod) {
        try {
            vacuna = cod;
            dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "ERROR AL PASAR LOS DATOS DE LA VACUNA--->" + e.getMessage());
        }

    }

    private void cargarVacunas(int codigoEspecie) {
        try {
            ResultSet rs = objVac.listarVacunasPorEspecie(codigoEspecie); // Llama al método en la clase de datos
            DefaultTableModel model = (DefaultTableModel) tblVacuna.getModel();
            model.setRowCount(0); // Limpiar tabla

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getDouble("dosis_x_kgpeso")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar las vacunas: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblVacuna;
    private javax.swing.JTextField txtVacuna;
    // End of variables declaration//GEN-END:variables
}
