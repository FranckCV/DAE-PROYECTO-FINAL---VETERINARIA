/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package capaPresentacion;

import soporte.*;
import capaNegocio.*;
import java.awt.Color;
import java.awt.Component;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.ButtonModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import soporte.CustomTableCellRenderer;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/**
 *
 * @author franc
 */
public class jdMantMedico extends javax.swing.JDialog {
    clsDetalle_Servicio objDetalleServicio = new clsDetalle_Servicio();
    clsMedico objTabla = new clsMedico();    
    clsEspecialidad objEs = new clsEspecialidad();
    clsUsuario objUsuario = new clsUsuario();
    
    private final String columnName_IDMedico = "ID";
    private final String columnName_Nombres = "Nombres";
    private final String columnName_ApePaterno = "A. Paterno";
    private final String columnName_ApeMaterno = "A. Materno";
    private final String columnName_DocIdentidad = "DNI";
    private final String columnName_NombreUsuario = "Nombre Usuario";
    private final String columnName_Sexo = "Sexo";
    private final String columnName_Disponibilidad = "Disponibilidad";
    private final String columnName_Vigencia = "Vigencia";
    private final String columnName_Especialidad = "Especialidad";
    private final String columnName_CantServicios = "Cant. Servicios";
    private final String columnName_IDServicio = "ID Servicio";
    private final String columnName_NombreServicio = "Servicio Disponible";
    private final String columnName_CostoServicio = "Costo";
    private final String columnName_DisponibilidadDetServicio = "Disp. Asignacion";
    
    public static String id_medico_asignacion = "";
    
    /**
     * Creates new form jdMantMarca
     */
    public jdMantMedico(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        btnNuevo.setText(Utilidad.BTN_NUEVO);
        btnModificar.setText(Utilidad.BTN_MODIFICAR);
        btnEliminar.setText(Utilidad.BTN_ELIMINAR);
        btnVigencia.setText(Utilidad.BTN_VIGENCIA);
        btnDisponibilidad.setText(Utilidad.BTN_DISPONIBILIDAD);
        btnContraseña.setText(Utilidad.BTN_CONTRASENIA);
        Utilidad.validacionTabla(tblMedico , true, true, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtDocIdentidad = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtApePat = new javax.swing.JTextField();
        txtApeMat = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbEspecialidad = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        chkDisponibilidad = new javax.swing.JCheckBox();
        radMasculino = new javax.swing.JRadioButton();
        radFemenino = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        chkVigencia = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        txtID = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtClave = new javax.swing.JPasswordField();
        txtUsuario = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnVigencia = new javax.swing.JButton();
        btnDisponibilidad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMedico = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblServiciosxMedico = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        btnAbrirGestionServicios = new javax.swing.JButton();
        btnContraseña = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));

        jPanel1.setBackground(new java.awt.Color(138, 238, 238));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel1.setText("Doc Identidad:");

        txtDocIdentidad.setEditable(false);
        txtDocIdentidad.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtDocIdentidad.setBorder(null);
        txtDocIdentidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDocIdentidadKeyTyped(evt);
            }
        });

        txtNombre.setEditable(false);
        txtNombre.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtNombre.setBorder(null);
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel2.setText("Nombres:");

        btnBuscar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/buscar-pequeño.png"))); // NOI18N
        btnBuscar.setBorder(null);
        btnBuscar.setBorderPainted(false);
        btnBuscar.setContentAreaFilled(false);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel3.setText("Ap. Paterno:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel4.setText("Ap. Materno:");

        txtApePat.setEditable(false);
        txtApePat.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtApePat.setBorder(null);
        txtApePat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApePatKeyTyped(evt);
            }
        });

        txtApeMat.setEditable(false);
        txtApeMat.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtApeMat.setBorder(null);
        txtApeMat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApeMatKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel5.setText("Disponibilidad:");

        cmbEspecialidad.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        cmbEspecialidad.setBorder(null);

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel7.setText("Especialidad:");

        chkDisponibilidad.setBackground(new java.awt.Color(0, 0, 0));
        chkDisponibilidad.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        chkDisponibilidad.setText("(Disponible)");
        chkDisponibilidad.setContentAreaFilled(false);
        chkDisponibilidad.setEnabled(false);
        chkDisponibilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDisponibilidadActionPerformed(evt);
            }
        });

        buttonGroup1.add(radMasculino);
        radMasculino.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        radMasculino.setText("Masculino");
        radMasculino.setContentAreaFilled(false);
        radMasculino.setEnabled(false);

        buttonGroup1.add(radFemenino);
        radFemenino.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        radFemenino.setText("Femenino");
        radFemenino.setContentAreaFilled(false);
        radFemenino.setEnabled(false);
        radFemenino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radFemeninoActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel6.setText("Sexo:");

        chkVigencia.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        chkVigencia.setText("(Vigencia)");
        chkVigencia.setContentAreaFilled(false);
        chkVigencia.setEnabled(false);
        chkVigencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkVigenciaActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel8.setText("Vigencia:");

        btnLimpiar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/opacado.png"))); // NOI18N
        btnLimpiar.setBorder(null);
        btnLimpiar.setBorderPainted(false);
        btnLimpiar.setContentAreaFilled(false);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        txtID.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtID.setBorder(null);
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel11.setText("ID:");

        jPanel3.setBackground(new java.awt.Color(51, 255, 153));

        txtClave.setEditable(false);
        txtClave.setBorder(null);

        txtUsuario.setEditable(false);
        txtUsuario.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtUsuario.setBorder(null);

        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel13.setText("Nombre de usuario:");

        jLabel14.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel14.setText("Contraseña");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(txtClave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radMasculino)
                            .addComponent(radFemenino)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtDocIdentidad, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtApePat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkDisponibilidad)
                            .addComponent(chkVigencia)
                            .addComponent(cmbEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApeMat, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtNombre)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpiar)
                        .addGap(34, 34, 34))))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnBuscar)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtApePat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtApeMat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmbEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDocIdentidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radMasculino)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(chkDisponibilidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radFemenino)
                    .addComponent(chkVigencia)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnNuevo.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/veterinario.png"))); // NOI18N
        btnNuevo.setText("Registrar");
        btnNuevo.setToolTipText("");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/editar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setMaximumSize(new java.awt.Dimension(118, 39));
        btnModificar.setMinimumSize(new java.awt.Dimension(118, 39));
        btnModificar.setPreferredSize(new java.awt.Dimension(118, 39));
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setMaximumSize(new java.awt.Dimension(118, 39));
        btnEliminar.setMinimumSize(new java.awt.Dimension(118, 39));
        btnEliminar.setPreferredSize(new java.awt.Dimension(118, 39));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnVigencia.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnVigencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/darBaja.png"))); // NOI18N
        btnVigencia.setText("Dar de baja");
        btnVigencia.setMaximumSize(new java.awt.Dimension(118, 39));
        btnVigencia.setMinimumSize(new java.awt.Dimension(118, 39));
        btnVigencia.setPreferredSize(new java.awt.Dimension(118, 39));
        btnVigencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVigenciaActionPerformed(evt);
            }
        });

        btnDisponibilidad.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnDisponibilidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/disponible.png"))); // NOI18N
        btnDisponibilidad.setText("Disponible");
        btnDisponibilidad.setMaximumSize(new java.awt.Dimension(118, 39));
        btnDisponibilidad.setMinimumSize(new java.awt.Dimension(118, 39));
        btnDisponibilidad.setPreferredSize(new java.awt.Dimension(118, 39));
        btnDisponibilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisponibilidadActionPerformed(evt);
            }
        });

        tblMedico.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tblMedico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblMedico.setToolTipText("");
        tblMedico.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMedicoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMedico);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/medico.png"))); // NOI18N
        jLabel10.setMaximumSize(new java.awt.Dimension(250, 250));
        jLabel10.setName(""); // NOI18N
        jLabel10.setPreferredSize(new java.awt.Dimension(250, 250));

        tblServiciosxMedico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblServiciosxMedico);

        jLabel12.setText("Lista de Servicios que realiza:");

        btnAbrirGestionServicios.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnAbrirGestionServicios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/veterinario.png"))); // NOI18N
        btnAbrirGestionServicios.setText("Gestionar Servicios de Medico");
        btnAbrirGestionServicios.setToolTipText("");
        btnAbrirGestionServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirGestionServiciosActionPerformed(evt);
            }
        });

        btnContraseña.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnContraseña.setIcon(new javax.swing.ImageIcon(getClass().getResource("/conector/Recursos/bloquear.png"))); // NOI18N
        btnContraseña.setText("Modificar contraseña");
        btnContraseña.setMaximumSize(new java.awt.Dimension(118, 39));
        btnContraseña.setMinimumSize(new java.awt.Dimension(118, 39));
        btnContraseña.setPreferredSize(new java.awt.Dimension(118, 39));
        btnContraseña.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContraseñaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVigencia, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnAbrirGestionServicios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(96, 96, 96))))
                    .addComponent(jScrollPane1))
                .addGap(20, 20, 20))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(963, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAbrirGestionServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModificar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnVigencia, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        jPanel4.setBackground(new java.awt.Color(0, 0, 102));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Veterinarios");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(446, 446, 446))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        if (btnNuevo.getText().equals(Utilidad.BTN_NUEVO)) {
            limpiarControles();
        } else {
            JOptionPane.showMessageDialog(this, "No puede ejecutar esta accion");
        }
        listarMedicos();
        tblServiciosxMedico.setModel(new DefaultTableModel());
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        listarNombreEspecialidades();
        listarMedicos();
        limpiarControles();
    }//GEN-LAST:event_formWindowOpened

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        try {
            nuevaMedico();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: "+e.getMessage());
        }
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        buscarMedico();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tblMedicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMedicoMouseClicked
        // TODO add your handling code here:
        try {
            txtID.setText(String.valueOf(tblMedico.getValueAt(tblMedico.getSelectedRow(), 0)));
            btnBuscarActionPerformed(null);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,"Debe finalizar la operacion actual primero");
        }        
    }//GEN-LAST:event_tblMedicoMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        if (btnNuevo.getText().equals(Utilidad.BTN_GUARDAR) || btnModificar.getText().equals(Utilidad.BTN_GUARDAR) || btnContraseña.getText().equals(Utilidad.BTN_GUARDAR) ) {
            cancelarAccion();
        } else {
            eliminarMedico();
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        modificarMedico();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnDisponibilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisponibilidadActionPerformed
        // TODO add your handling code here:
//        String id = txtID.getText();
        cambiarDisponibilidad();
    }//GEN-LAST:event_btnDisponibilidadActionPerformed

    private void radFemeninoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radFemeninoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radFemeninoActionPerformed

    private void btnVigenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVigenciaActionPerformed
        // TODO add your handling code here:
        darBaja();
    }//GEN-LAST:event_btnVigenciaActionPerformed

    private void txtDocIdentidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocIdentidadKeyTyped
        // TODO add your handling code here:
        Utilidad.validarCampoTextoDocIdentidad(evt);
    }//GEN-LAST:event_txtDocIdentidadKeyTyped

    private void chkDisponibilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDisponibilidadActionPerformed
        // TODO add your handling code here:
        boolean valor = chkDisponibilidad.isSelected();
        chkDisponibilidad.setSelected(valor);
    }//GEN-LAST:event_chkDisponibilidadActionPerformed

    private void chkVigenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkVigenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkVigenciaActionPerformed

    private void txtIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyTyped
        // TODO add your handling code here:
        Utilidad.validarCampoTextoSoloNumero(evt);
    }//GEN-LAST:event_txtIDKeyTyped

    private void btnAbrirGestionServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirGestionServiciosActionPerformed
        // TODO add your handling code here:
        try {
            if (txtID.getText().isBlank()) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un codigo para asignar servicios");
            } else if (Utilidad.verificarElementoParaUso(clsMedico.TABLA, clsMedico.VIGENCIA, Integer.parseInt(txtID.getText()))) {
                buscarMedico();
                Utilidad.mensajeElementoNoVigente(clsMedico.TABLA, txtNombre.getText()+" "+txtApePat.getText()+" "+txtApeMat.getText());
            } else {
                buscarMedico();
                id_medico_asignacion = txtID.getText();
                jdDetalle_Servicio obj = new jdDetalle_Servicio((Frame) SwingUtilities.getWindowAncestor(this), true);
                obj.setLocationRelativeTo(this);
                obj.setVisible(true);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnAbrirGestionServiciosActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        listarMedicos();
        if (!txtID.getText().isBlank()) {
            listarServiciosxMedico();
        }
    }//GEN-LAST:event_formWindowGainedFocus

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        // TODO add your handling code here:
        try {
            Utilidad.validarCampoTextoSoloLetras(evt);
            Utilidad.validarLimiteCampoTexto(evt, clsMedico.NOMBRES, clsMedico.TABLA);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error en el campo "+evt.getSource().getClass().getName()+": " + e.getMessage());
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtApePatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApePatKeyTyped
        // TODO add your handling code here:
        try {
            Utilidad.validarCampoTextoSoloLetras(evt);
            Utilidad.validarLimiteCampoTexto(evt, clsMedico.APE_PATERNO, clsMedico.TABLA);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error en el campo "+evt.getSource().getClass().getName()+": " + e.getMessage());
        }
    }//GEN-LAST:event_txtApePatKeyTyped

    private void txtApeMatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApeMatKeyTyped
        // TODO add your handling code here:
        try {
            Utilidad.validarCampoTextoSoloLetras(evt);
            Utilidad.validarLimiteCampoTexto(evt, clsMedico.APE_MATERNO, clsMedico.TABLA);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error en el campo "+evt.getSource().getClass().getName()+": " + e.getMessage());
        }
    }//GEN-LAST:event_txtApeMatKeyTyped

    private void btnContraseñaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContraseñaActionPerformed
        // TODO add your handling code here:
        modificarContraseña();
    }//GEN-LAST:event_btnContraseñaActionPerformed
    
    private void modificarContraseña() {
        try {
            if (txtID.getText().isBlank()) {
                Utilidad.mensajeErrorFaltaID(this);
            } else {
                buscarMedico();
                if (btnContraseña.getText().equals(Utilidad.BTN_CONTRASENIA)) {
                    btnContraseña.setText(Utilidad.BTN_GUARDAR);
                    btnEliminar.setText(Utilidad.BTN_CANCELAR);
                    editableControles(
                            false, 
                            false, 
                            false, 
                            false, 
                            false, 
                            false, 
                            false, 
                            false, 
                            true, 
                            false, 
                            false
                    );
                    usarBotones(false, false, false, true, false, false, true, false, false);
                    tblMedico.setEnabled(false);
                } else {
                    int id_user = objTabla.obtenerIDUser(Integer.parseInt(txtID.getText()));
                    int valor = Utilidad.mensajeConfirmarModificarContraseña("usuario", id_user, txtNombre.getText()+" "+txtApePat.getText()+" "+txtApeMat.getText());
                    if (valor == JOptionPane.YES_OPTION) {
                        objUsuario.modificarContraseña(id_user, txtUsuario.getText(), txtClave.getText());
                        JOptionPane.showMessageDialog(this, "La contraseña se modificó exitosamente");
                        
                        usarBotones(true, true, true, true, true, true, true, true, true);
                        editableControles(
                            true, 
                            false, 
                            false, 
                            false, 
                            false, 
                            false, 
                            false, 
                            false, 
                            false, 
                            false, 
                            false
                        );
                        radFemenino.setEnabled(true);
                        radMasculino.setEnabled(true);
                        chkVigencia.setEnabled(true);
                        btnContraseña.setText(Utilidad.BTN_CONTRASENIA);
                        btnEliminar.setText(Utilidad.BTN_ELIMINAR);
                        limpiarControles();
                        listarMedicos();
                        tblMedico.setEnabled(true);

                    }
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar -->" + e.getMessage());
        }
    }
    
    private void listarMedicos(){
        ResultSet rsDato = null;
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn(columnName_IDMedico);
        modelo.addColumn(columnName_Nombres);
        modelo.addColumn(columnName_ApePaterno);
        modelo.addColumn(columnName_ApeMaterno);
        modelo.addColumn(columnName_NombreUsuario);
        modelo.addColumn(columnName_DocIdentidad);
        modelo.addColumn(columnName_Sexo);
        modelo.addColumn(columnName_Disponibilidad);
        modelo.addColumn(columnName_Vigencia);
        modelo.addColumn(columnName_Especialidad);
        modelo.addColumn(columnName_CantServicios);
        tblMedico.setModel(modelo);        
        try {
            rsDato = objTabla.listarMedicosconServicios();
            while (rsDato.next()){
                modelo.addRow(new Object[]{
                    rsDato.getString(clsMedico.ID),
                    rsDato.getString(clsMedico.NOMBRES),
                    rsDato.getString(clsMedico.APE_PATERNO),
                    rsDato.getString(clsMedico.APE_MATERNO),
                    rsDato.getString("nomusuario"),
                    rsDato.getString(clsMedico.DOC_IDENTIDAD),
                    Utilidad.textoBool(rsDato.getBoolean(clsMedico.SEXO), Utilidad.SEXO_MAS, Utilidad.SEXO_FEM),
                    Utilidad.textoBool(rsDato.getBoolean(clsMedico.DISPONIBILIDAD), Utilidad.DISPONIBILIDAD_SI, Utilidad.DISPONIBILIDAD_NO),
                    Utilidad.textoBool(rsDato.getBoolean(clsMedico.VIGENCIA), Utilidad.VIGENCIA_SI, Utilidad.VIGENCIA_NO),
                    Utilidad.textoBool(rsDato.getBoolean("disp_esp"), rsDato.getString(clsEspecialidad.NOMBRE), Utilidad.DISPONIBLE_NO_EXT+" "+rsDato.getString(clsEspecialidad.NOMBRE)),
                    rsDato.getInt(clsMedico.CANT_SERVICIOS)
                });
            }
            tblMedico.setModel(modelo);
            
//            Object[][] conditions = {
//                {6, "No Disponible", "#FFD1C9"},
//                {7, "No Vigente", "#FFD1C9"},
//                {8, "(No Disp)", "#FFD1C9"}
//            };
//
//            CustomTableCellRenderer.setCustomRenderer(tblMedico, conditions);
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al listar tabla "+clsMedico.TABLA+": " + e.getMessage());
        }
    }
           
    private void buscarMedico() {
        ResultSet rsPro = null;
        try {
            if (txtID.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Debe ingresar una ID para buscar");
            } else {    
                for (int i = 0; i < tblMedico.getRowCount(); i++) {
                    String valorCodigo = tblMedico.getValueAt(i, 0).toString();
                    if (valorCodigo.equals(txtID.getText())) {
                        tblMedico.setRowSelectionInterval(i, i);
                        tblMedico.scrollRectToVisible(tblMedico.getCellRect(i, 0, true));
                        break;
                    }
                }      
                rsPro = objTabla.buscarMedico(Integer.parseInt(txtID.getText()));
                if (rsPro.next()){
                    txtNombre.setText(rsPro.getString(clsMedico.NOMBRES));
                    txtApePat.setText(rsPro.getString(clsMedico.APE_PATERNO));
                    txtApeMat.setText(rsPro.getString(clsMedico.APE_MATERNO));
                    radMasculino.setSelected(rsPro.getBoolean(clsMedico.SEXO));
                    radFemenino.setSelected(!rsPro.getBoolean(clsMedico.SEXO));
                    txtUsuario.setText(rsPro.getString("nomusuario"));
                    txtDocIdentidad.setText(rsPro.getString(clsMedico.DOC_IDENTIDAD));
                    chkDisponibilidad.setSelected(rsPro.getBoolean(clsMedico.DISPONIBILIDAD));
                    chkVigencia.setSelected(rsPro.getBoolean(clsMedico.VIGENCIA));
                    
//                    if (e.getSource() == btnModificar) { 
//                        listarNombreEspecialidades();
                        cmbEspecialidad.setSelectedItem(rsPro.getString(clsEspecialidad.NOMBRE));
//                    } else {
//                        cmbEspecialidad.setModel(new DefaultComboBoxModel());
//                        cmbEspecialidad.addItem(rsPro.getString(clsEspecialidad.NOMBRE));
//                    }
                    listarServiciosxMedico();
                    rsPro.close();
                } else {
                    JOptionPane.showMessageDialog(this, "Este codigo en "+clsMedico.TABLA+" no existe");
                    limpiarControles();
                    listarMedicos();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error:" + e.getMessage());
            listarMedicos();
            limpiarControles();
        }
    }
    
    private void listarNombreEspecialidades() {
        ResultSet rsEsp = null;
        DefaultComboBoxModel modeloMar = new DefaultComboBoxModel();
        cmbEspecialidad.setModel(modeloMar);
        try {
            rsEsp = objEs.listarEspecialidadesVigentes();
            while (rsEsp.next()) {
                modeloMar.addElement(rsEsp.getString(clsEspecialidad.NOMBRE));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al mostrar "+clsEspecialidad.TABLA+": " + e.getMessage());
        }
    }
    
    private void usarBotones(boolean bus, boolean nue, boolean mod, boolean eli, boolean vig, boolean disp, boolean cont, boolean lim , boolean asig) {
        btnBuscar.setEnabled(bus);
        btnNuevo.setEnabled(nue);
        btnEliminar.setEnabled(eli);
        btnLimpiar.setEnabled(lim);
        btnDisponibilidad.setEnabled(disp);
        btnVigencia.setEnabled(vig);
        btnModificar.setEnabled(mod);
        btnContraseña.setEnabled(cont);
        btnAbrirGestionServicios.setEnabled(asig);
    }
    
    private void limpiarControles() {
        txtID.setText("");
        txtDocIdentidad.setText("");
        txtNombre.setText("");
        txtApePat.setText("");
        txtApeMat.setText("");
        txtUsuario.setText("");
        txtClave.setText("");
        radMasculino.setSelected(false);
        radFemenino.setSelected(false);
        chkDisponibilidad.setSelected(false);
        chkVigencia.setSelected(false);
        tblMedico.setEnabled(true);
        txtID.requestFocus();
        
        listarNombreEspecialidades();
        cmbEspecialidad.setSelectedIndex(-1);

    }
   
    private void editableControles(boolean id , boolean dni, boolean nom, boolean apeP, boolean apeM, boolean sexo, boolean disp, boolean usu, boolean cont, boolean vig, boolean esp) {
        txtID.setEditable(id);
        txtDocIdentidad.setEditable(dni);
        txtUsuario.setEditable(usu);
        txtClave.setEditable(cont);
        txtNombre.setEditable(nom);
        txtApePat.setEditable(apeP);
        txtApeMat.setEditable(apeM);
        radMasculino.setEnabled(sexo);        
        radFemenino.setEnabled(sexo);
        chkVigencia.setEnabled(vig);
        chkDisponibilidad.setEnabled(disp);
        cmbEspecialidad.setEnabled(esp);
    }
          
    private void eliminarMedico() {
        try {
            if (txtID.getText().isBlank()) {
                Utilidad.mensajeErrorFaltaID(this);
            } else if (Utilidad.verificarElementoParaUso(clsMedico.TABLA, clsMedico.VIGENCIA, Integer.parseInt(txtID.getText()))) {
                buscarMedico();
                Utilidad.mensajeElementoNoVigente(clsMedico.TABLA, txtNombre.getText()+" "+txtApePat.getText()+" "+txtApeMat.getText());
            } else if (Utilidad.validarEliminacionForanea(clsMedico.TABLA, Integer.parseInt(txtID.getText()))){
                buscarMedico();
                Utilidad.mensajeErrorNoEliminarForanea(clsMedico.TABLA,txtNombre.getText() +" "+ txtApePat.getText() +" "+ txtApeMat.getText());
            } else {
                buscarMedico();
                int valor = Utilidad.mensajeConfirmarEliminar(clsMedico.TABLA, Integer.parseInt(txtID.getText()), txtNombre.getText() +" "+ txtApePat.getText() +" "+ txtApeMat.getText());
                if (valor == 0) {
                    int med_id = Integer.parseInt(txtID.getText());
                    int user_id = objTabla.obtenerIDUser(med_id);
                    objTabla.eliminarMedico(med_id);
                    objUsuario.eliminarUsuario(user_id);
                    limpiarControles();
                    listarMedicos();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
    
    private void cancelarAccion() {
        btnNuevo.setText(Utilidad.BTN_NUEVO);
        btnModificar.setText(Utilidad.BTN_MODIFICAR);
        btnEliminar.setText(Utilidad.BTN_ELIMINAR);   
        btnContraseña.setText(Utilidad.BTN_CONTRASENIA);        
        editableControles(true, false ,false, false, false,false, false, false, false, false, false);
        usarBotones(true, true, true, true, true, true, true,true,true);
        tblMedico.setEnabled(true);
        limpiarControles();
        listarMedicos();
    }

    private void modificarMedico() {
        try {
            if (txtID.getText().isBlank()) {
                Utilidad.mensajeErrorFaltaID(this);
            } else {
                if (Utilidad.verificarElementoParaUso(clsMedico.TABLA, clsMedico.VIGENCIA, Integer.parseInt(txtID.getText()))) {
                    Utilidad.mensajeElementoNoVigente(clsMedico.TABLA, txtNombre.getText()+" "+txtApePat.getText()+" "+txtApeMat.getText());
                } else {
                    if (btnModificar.getText().equals(Utilidad.BTN_MODIFICAR)) {
                        buscarMedico();
                        btnModificar.setText(Utilidad.BTN_GUARDAR);
                        btnEliminar.setText(Utilidad.BTN_CANCELAR);
                        editableControles(false, true,true, true, true, true,false,true,false, true, true);
                        usarBotones(false, false, true, true, false, false, false, false,false);
                        tblMedico.setEnabled(false);
                    } else {
                        int med_id = Integer.parseInt(txtID.getText());
                        int user_id = objTabla.obtenerIDUser(med_id);
                        
                        objUsuario.modificarInfoUsuarioVet(
                                user_id,
                                txtUsuario.getText(),
                                radMasculino.isSelected(), 
                                txtNombre.getText(),
                                txtApePat.getText(),
                                txtApeMat.getText()
                        );
                        
                        objTabla.modificarMedico(
                            med_id,
                            txtNombre.getText(),
                            txtApePat.getText(),
                            txtApeMat.getText(),
                            txtDocIdentidad.getText(),
                            radMasculino.isSelected(),
                            objEs.obteneIdEspecialidad(cmbEspecialidad.getSelectedItem().toString())
                        );
                        btnModificar.setText(Utilidad.BTN_MODIFICAR);
                        btnEliminar.setText(Utilidad.BTN_ELIMINAR);
                        editableControles(true, false,false, false, false, false, false, false, false, false , false);
                        usarBotones(true, true, true, true, true, true, true, true,true);
                        tblMedico.setEnabled(true);
                        limpiarControles();
                        listarMedicos();
                        JOptionPane.showMessageDialog(this, "Se modificó con exito");
                    }
                }                
            }            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error:" + e.getMessage());
        }
    }    

    private void nuevaMedico() throws Exception {
        try {
            if (btnNuevo.getText().equals(Utilidad.BTN_NUEVO)) {
                btnNuevo.setText(Utilidad.BTN_GUARDAR);
                btnEliminar.setText(Utilidad.BTN_CANCELAR);
                listarMedicos();
                limpiarControles();
                editableControles(false,true, true, true, true, true, false, true, true ,false, true);
                txtID.setText(objTabla.generarIDMedico().toString());
                chkDisponibilidad.setSelected(true);
                chkVigencia.setSelected(true);
                tblMedico.setEnabled(false);
                usarBotones(false, true, false, true, false, false, false,false,false);
                txtNombre.requestFocus();
            } else {
                if (
                        txtNombre.getText().trim().isBlank() || 
                        txtDocIdentidad.getText().trim().isBlank() || 
                        txtApeMat.getText().trim().isBlank() || 
                        txtApePat.getText().trim().isBlank() || 
                        txtClave.getText().trim().isBlank() || 
                        txtUsuario.getText().trim().isBlank() || 
                        txtID.getText().trim().isBlank() ||
                        cmbEspecialidad.getSelectedItem().toString().isBlank() ||
                        buttonGroup1.getSelection() == null
                        ) {
                    JOptionPane.showMessageDialog(this, "Debe llenar todos los campos");
                } else if (Utilidad.validarElementoTextoRepetido(clsMedico.TABLA, clsMedico.DOC_IDENTIDAD, txtDocIdentidad.getText()) ) {
                    JOptionPane.showMessageDialog(this, "Ya existe un medico con este numero de documento de identificacion");
                } else if (Utilidad.validarElementoTextoRepetido("usuario", "nomusuario", txtUsuario.getText())) {
                    JOptionPane.showMessageDialog(this, "Ya existe un medico con este nombre de usuario");
                } else {
                    int idUsu = objUsuario.generarCodigoUsuario();
                    btnNuevo.setText(Utilidad.BTN_NUEVO);
                    btnEliminar.setText(Utilidad.BTN_ELIMINAR);
                    
                    objUsuario.registrarUsuario(
                            idUsu,
                            txtUsuario.getText(), 
                            true, 
                            radMasculino.isSelected(),
                            txtClave.getText(), 
                            txtNombre.getText(), 
                            txtApePat.getText(),
                            txtApeMat.getText(), 
                            "V"
                    );
                    
                    objTabla.registrarMedico(
                        Integer.parseInt(txtID.getText()),
                        txtNombre.getText(),
                        txtApePat.getText(),
                        txtApeMat.getText(),
                        txtDocIdentidad.getText(),
                        radMasculino.isSelected(),
                        objEs.obteneIdEspecialidad(cmbEspecialidad.getSelectedItem().toString()),
                        idUsu
                    );
                    
                    editableControles(true, false ,false, false, false, false, false, false, false , false ,false);
                    usarBotones(true, true, true, true, true, true, true, true,true);
                    limpiarControles();
                    listarMedicos();
                    tblMedico.setEnabled(true);
                    JOptionPane.showMessageDialog(this, "Se registró con exito");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error:" + e.getMessage());
        }
    }
    
    private void cambiarDisponibilidad() {
        String campoID = txtID.getText();
        int valorID;
        try {
            ResultSet rsCateg = null;
            if (campoID.isBlank()) {
                Utilidad.mensajeErrorFaltaID(this);
            } else {
                buscarMedico();
                if (Utilidad.verificarElementoParaUso(clsMedico.TABLA, clsMedico.VIGENCIA, Integer.parseInt(txtID.getText()))) {
                    Utilidad.mensajeElementoNoVigente(clsMedico.TABLA, txtNombre.getText()+" "+txtApePat.getText()+" "+txtApeMat.getText());
                } else {
                    valorID = Integer.parseInt(campoID);
                    rsCateg = objTabla.buscarMedico(valorID);
                    int valor = Utilidad.mensajeConfirmarDisponibilidad(clsMedico.TABLA, Integer.parseInt(txtID.getText()),txtNombre.getText()+" "+txtApePat.getText()+" "+txtApeMat.getText());
                    if (rsCateg.next()) {
                        if (valor == 0) {
                            objTabla.cambiarDisponibilidad(valorID);
                            limpiarControles();
                            listarMedicos();
                            txtID.setText(String.valueOf(valorID));
                            btnBuscarActionPerformed(null);
                            JOptionPane.showMessageDialog(this, "Se modificó la Disponibilidad de este médico con exito");
                        }
                    }     
                }                           
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
    
    private void darBaja() {
        try {
            ResultSet rsCateg = null;                
            int id_med;
            int id_usu;
            if (txtID.getText().isBlank()) {
                Utilidad.mensajeErrorFaltaID(this);
            } else {
                buscarMedico();
                if (Utilidad.verificarElementoParaUso(clsMedico.TABLA, clsMedico.VIGENCIA, Integer.parseInt(txtID.getText()))) {
                    Utilidad.mensajeElementoNoVigente(clsMedico.TABLA, txtNombre.getText()+" "+txtApePat.getText()+" "+txtApeMat.getText());
                } else {
                    id_med = Integer.parseInt(txtID.getText());
                    id_usu = objTabla.obtenerIDUser(id_med);
                    int valor = Utilidad.mensajeConfirmarVigencia(clsMedico.TABLA, Integer.parseInt(txtID.getText()), txtNombre.getText()+" "+txtApePat.getText()+" "+txtApeMat.getText());
                    if (valor == 0) {
                        rsCateg = objTabla.buscarMedico(Integer.parseInt(txtID.getText()));
                        if (rsCateg.next()) {
                            objTabla.darBaja(id_med);
                            objUsuario.darBaja(id_usu);
                            limpiarControles();
                            listarMedicos();
                        } 
                    }  
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
    
    private void listarServiciosxMedico(){
        ResultSet rsDato = null;
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn(columnName_IDServicio);
        modelo.addColumn(columnName_NombreServicio);
        modelo.addColumn(columnName_CostoServicio);
        modelo.addColumn(columnName_DisponibilidadDetServicio);
        tblServiciosxMedico.setModel(modelo);        
        try {
            rsDato = objDetalleServicio.listarServiciosxMedico(Integer.parseInt(txtID.getText()));
            while (rsDato.next()){
                modelo.addRow(new Object[]{
                    rsDato.getString(clsServicio.ID),
                    rsDato.getString(clsServicio.NOMBRE),
                    rsDato.getString(clsServicio.COSTO),
                    Utilidad.textoBool(rsDato.getBoolean("det_disp"), Utilidad.DISPONIBILIDAD_SI, Utilidad.DISPONIBILIDAD_NO)
                });
                }
            tblServiciosxMedico.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al listar tabla "+clsServicio.TABLA+": " + e.getMessage());
        }
    }
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirGestionServicios;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnContraseña;
    private javax.swing.JButton btnDisponibilidad;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnVigencia;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkDisponibilidad;
    private javax.swing.JCheckBox chkVigencia;
    private javax.swing.JComboBox<String> cmbEspecialidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton radFemenino;
    private javax.swing.JRadioButton radMasculino;
    private javax.swing.JTable tblMedico;
    private javax.swing.JTable tblServiciosxMedico;
    private javax.swing.JTextField txtApeMat;
    private javax.swing.JTextField txtApePat;
    private javax.swing.JPasswordField txtClave;
    private javax.swing.JTextField txtDocIdentidad;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

}
